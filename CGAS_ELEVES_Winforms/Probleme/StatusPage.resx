<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAaoAAACRCAYAAACSRfwsAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAS
        cgAAEnIBXmVb4wAAFPxJREFUeF7tnemPFOUWh/0H/OIHEz/JqiibC4gjmzgCAioCEjAqSxARCIusgopg
        uCBGhSARRBYdCYiACihbQELiBxABQUQkgCyyL4MM++J77++9VZ22LZjuma7pt6ueJznR6W66uqu76ulT
        deqcWwwAAIDDICoAAHAaRAUAAE6DqAAAwGkQFQAAOA2iAgAAp0FUAADgNIgKAACcBlEBAIDTICoAAHAa
        RAUAAE6DqAAAwGkQFQAAOA2igtC4fv26OXXqlDl48KD979WrV717AADSxwlRaUc2ePBgM2rUKNO5c2dT
        WFhIRCAeffRR07hxY9OlSxczZcoUs3//fu8TBwBIn5yL6vLly6ZNmzbmzjvvJCIcBQUFZuXKld6nDgCQ
        PjkX1e7du029evUCd25EdOL+++833377rfepAwCkT85FtW3bNtOhQwe7M6tWrZpp2bKl6devHxGBaNu2
        ralTpw6iAoBykXNRbd261Z6X0s7snnvuMW+88YZ3D+Q7X375pT1PhagAoDwgKggNRAUA2QBRQWggKgDI
        BogKQgNRAUA2QFQQGogKALIBooLQQFQAkA0QFYQGogKAbICoIDQQFQBkA0QFoYGoACAbICoIDUQFANkA
        UUFoICoAyAaICkIDUQFANkBUEBqICgCyAaKC0EBUAJANEBWEBqICgGyAqCA0EBVAxXHt2jXz559/mh9+
        +MGsXbs2p7Fu3Tq7bz937pz36soHooLQQFQAFcPVq1fN9u3bzeuvv25q1aplt7lcRtWqVU2bNm3sPuD0
        6dPeqyw7iApCA1EBhM/169fNH3/8YV555RVTqVIlU7NmTdOsWTPTqlWrnESLFi1MQUGBqVKlinnggQfM
        nDlzbLZXHhAVhAaiAgifkpIS89FHH1lJKZt6+eWXzezZs82SJUtyEosWLTLvvvuulaVkJXn99ttv3qst
        G4gKQgNRAYSLMpVffvnFNGnSxFSvXt106tTJLF682CxbtiynIWF98MEHdruvUaOGGTp0qLl8+bL3qjMH
        UUFoICqAcPnrr7/M+++/b7Ophx9+2EydOjVQHLmIr776ygwYMCDx2iTUsoKoIDQQFUB4/P3332bPnj2m
        ZcuW5q677jLdunULFEau4rvvvjOzZs0y9913nz1vNm7cOO+VZw6igtBAVADhcfHiRXuYT9uXZDB58uRA
        YeQyFi5caHr06GEqV65sz1WdPXvWe/WZgaggNBAVQHio7HvEiBG2YOHxxx+3GUyQLHIZS5cutYcmVa5e
        v359e31VWUBUcFO2bNliNm3aZPbu3evdkj6ICiAcdNjvwIEDVlAqVujdu3egKFwIlaerXF2H/yZMmOC9
        g8xAVPAvdPHg6tWr7a+hTz75xEZRUZH9e/Pmzd6jSgdRAYSDttENGzbYbatOnTo2awmShAuxYMEC8+KL
        L9qsSvt6XfeVKZERlT64efPmmQYNGphbbrnF/ld/63bx9ttvW7Mns3PnTrvskydPercY+xjtXA8dOuTd
        8v/H1a1b1z6v4rbbbjMjR440p06dsvcHLXvu3Lnm0qVL9n49p/9v/dAJUC1Xr6tnz57/ajXiL1PtUPQ4
        PT71OfS8elzDhg3t45LR3/57Tv13/r+9ETqk4AsqNfS+0gVRAYTD+fPn7Tasbeuhhx6y21qQJFyIb775
        xu7X9VobN25szpw5k/EFwJEQldLgSZMm2R3+8ePH7W36r/6ePn26vT8dUV24cMG8+uqrpl27dvYkpU/q
        4yQgHRvWdQLpLFvL1fKD0O06dqsP00fPP2TIEHP77bcnRKXl63WkotskxmeffTaxfOGLyif1PdyMZFGp
        akfHlREVgDsUFxeb0aNH2/NT6gQRJAhXQtv9hx9+aAsq/DJ17WszIRKi2rdvn5VL6nmUHTt2mGHDhtlK
        k3REpV5ZEtBPP/1ke2b5F6gF7eR9+aSz7NJE9emnn9rKmCNHjtjbJIZBgwbZctN0RNW/f38zfPhwK0yJ
        UWRLVD///LP99aZDgYgKwA2OHTtmD6epLL1r166BgnApPv/8c3uI8sEHHzTLly+3WVUmREJU2im/9NJL
        dod6I9IR1YwZM8yqVaus7V977bWEfFIfJ/n06dPHZkHpLLs0Uek59BiJRh/gwIEDrSB69eqVlqh01beu
        p1BWtXHjRnt7tkS1YsUK++tN0kFUAG6gLulqUXTvvffaoy9BcnAptN8oLCy0ZfQ6353OfiiZyIhKO/Wb
        pZPaaQedq/HPFUk+ykoOHz5sH69+VQqhnXzyOSql27rqWicFU5e9a9cu884779iYOHGizZIkoeRlKnTY
        UPiikhy6d+9usyMdMtQ5q2RRpZ6jeuSRR2w254tKy1+zZo15/vnn7XNlS1QKX1KICsAN9u/fb2rXrm17
        +40ZMyZQDi7FF198YZ555hn7mnUY8OjRo947SQ8yKm/nrcN9d9xxxz9k4AsodSd/8OBB+7cOFaaK6sSJ
        E3Yei3pdqc29/m06GZXQIT9lRUrr9XzJotLy9Fyp6DZfVCrqUJGHRJdNUSUHogLIPeqWru1Kh9P0gzhI
        Di6FKv+6dOliM0Dtl5KL1dIh0ueo9NxaOTqcdjNRSS4q79RhPx+dn9J5KskoaCevjGjatGk3XLb+1rL1
        3OmKKpmyiErokIB+uegwYllFdeb3vWZnhyGBsaP7m96jSgdRAYSDLyodStMpiyA5uBQ6OqXTJX6DWl0D
        lgmRENWNKu/U7l5l4+Jmotq9e7eVgqSTjESkL0HQTl7Zj1a8BJG6bGUkOsflFzdUpKjEypUrza233lp2
        UW3eYS7X7WbjStf/mCs93jFXnhlh/y5u9Ir3qNJBVADh4ItK855UqBAkB5dCp0pUIHb33Xebfv362UOX
        mRAJUYnyXEel1iMaOpa8sxc6HCgBqTtD6k5eUtNtSmHLex1VOqK62XVUqaLScgcPHpwVUV2bvNBcm/qN
        uTp4CqICcIRkUen8T5AcXIqvv/7a1gCoSlH72tSkoDQiIyrIHsVbfzcnG/UKjMOtB3qPKh1EBRAOvqhU
        7q3Gr0FycClUIa1TKYgKsoYyRJWlq2VSavz444/eo0oHUQGEgy+qevXq2WwlSA4uhUQ1atQoRAXugagA
        wiE5o1KhQpAcXAq/jRKiAudAVADhkCyq+fPnB8rBpVDWpwIzRAXOgagAwiG5mEJFVUFycClU9acOGhKV
        qqURFTgDogIIB19U2q5mz54dKAeXQocn1XVH5elq/B3b8nRwD0QFEA6+qNTaTS2JguTgUvgj6dWZ4s03
        37SNCTIBUUFoICqAcNChMx1GU++8cePGBcrBpdB5tI4dO9rehOoC5E+KSBdEBaGBqADCQf1G1ZhaGYqK
        FILk4FKoIYKaFigD1Iw7tZbLBEQFoYGoAMJBGUn79u3tOR91sAmSg0uhgg9NIlbxh0rVNTooExAVhAai
        AgiHU6dO2TZpVatWNU8//XSgHFwJtajT5AW9VslKTQM0xigTEBWEBqICCIeSkhLbNLtSpUqmoKDAZilB
        knAhFi9ebMaOHWv3Aw0bNrTZ4JUrV7x3kh6ICkIDUQGEg8YQaVCqti2N+vj4448DJeFCqOJPF/lWrlzZ
        tG7d2g6c1VSJTEBUEBqICiActKPfs2ePlZQKKjRBIUgSLoQKKZo3b2737yr8KAuICkIDUQGEhyrnVEhR
        rVo1OyxV21eQKHIZek3K9jQwUYUUaqVUFhAVhAaiAggPFSSoK4W2L1cHKKp1koo+dC6tWbNmGU/29UFU
        EBqICiA8rl27Zvef2ra071RroiBZ5CpU7VdUVGQee+yxxGTfsoKoIDQQFUC4qExdzV6rVKliCgsLnZr2
        q2o/TRnX9q+5WatWrfJedeYgKggNRAUQLqr+W716talTp47dfw4YMMAsWbIkUBwVGdrWZ8yYYbtR6Pqp
        Tp06ZXztVDKICkIDUQGEj7KqQYMG2fNAmk81YcIE21tP11ZlGip20L9Vt/Og+9MJnZeaOXOm6d69uy1J
        b9SoUbm3fUQFoYGoAMLn6tWrZtOmTXZbkxh0mE0zn7QvzTRGjBhh+vbtawsggu5PJ1SCrn26xKnefmPG
        jPFeadlBVBAaiAqgYrhw4YLNhtq0aWPloM7q1atXzyhU5q5tVSHJ6JBd0OPSCZWjK5MaPny4vd6rvCAq
        CA1EBVBx6HyVMqvx48fbc1WZhIYadu3aNSEqyaZdu3aBj00ndAGyyuVPnz7tvbrygaggNBAVQH6gtka/
        /vprQlTaXhcsWODdm3sQFYQGogLIDxBVKSCq6IKoAPIDRFUKiCq6ICqA/CBIVNp+XQFRQWggKoD8AFGV
        wrZt28xzzz2HqCIIogLIDxBVKajG/sknn7S9qjRXRQO2pkyZkojJkyfbZou6vawxcOBA+zzJz0uEHxpB
        oHk5+uLXqlXLzJ071/vUAcAlENVNuHjxou2oW7NmTXtFtWr3dbGadm7JoYvHdAFbWUP/PvU5ifBDPzz0
        A0RffH2++kFy7Ngx79MHAFdAVDdAEyr37t1rJeKvHCLaoc+6PB2UASAcENUNuHTpUqIFvB/61V27dm07
        BMwPZVhq7aH7yhL6Ra9WIOounPy8RPihrErnHdWORZ+vPgtdtQ4AboGoAvCzKclDK0U7sqZNm9oVtXPn
        TvP777//I3bs2FHuCHpeIvzYvn27GTZsWOJz1gawdu1a75sAAC6AqAK4cuWKmTZtWmKlaPqjhmxB9NAG
        sHHjRlO/fn37WSu7JasCcAtElYKfTWluilaIfmWrhPn8+fPeIyBqnD171vTs2TPxeWsMAUUVAO6AqFJI
        zaZUladJkBBdNC9HIwj8z1zVnRMnTvTuBYBcg6iSuFE2debMGe8REEX0uWsKabdu3RKfe4MGDcz69esD
        z2u5GLt27TLFxcXeOwKIFogqidRsStV848aN8+6FKJOaVakiU4PV9EMlH6JZs2ambdu2tpMKQNRAVEmc
        O3fuX9nUiRMnvHshyiirOn78eKLSMx9DhSA9evTw3hFAdEBUHsqmZs6cmVgRZFPxQ9fOjR49OvEdyLfw
        f1wBRA1E5aGqvieeeOIfGzzZVLxQVnXgwAF7MbC/QaiwQn0Yi4qKnIxZs2aZ9u3b/+N7CxA1ENX/0PmJ
        pUuX2ixKK4FsKr4oqxo5cmRig5Copk+fbkpKSpyMkydP2qbIeq0Slc5VAUQNRPU/lE099dRTiZWgZqVk
        U/FEWdW+ffsSFwCrqKJDhw7OXlclsQ4dOtS+VkQFUSX2ovJL0pOzqTFjxnj3QhxJzarUPX/OnDnevW6B
        qCAOxF5U/igPfwWoSal670F8yaesClFBHIi1qPxsSnLSm/ezKVUAQrxJzao0WNHFESCICuJArEWljTx5
        lAfZFPikZlWuNqtFVBAHYisqP5tKHuWh0l6yKfBJzqr0/dDG4doIEEQFcSC2okptl8QoD0hFG4frI0AQ
        FcSBWIrKz6YY5QGl4foIEEQFcSCWokrNphjlATfC9REgiAriQOxEdaNsilEeEIS+L6kjQAoKCpzJqhAV
        xIHYiSo1m6JdEpRGalalDNyVC4ARFcSB2ImKUR6QKcqqNALEL6rQ96ZJkyZOZFWICuJArESlbIpRHlAW
        Ll++bCZNmpT47riSVSEqiAOxEhWjPKCsKKs6dOiQc1kVooI4EBtR6Y2uX7/+H81nyaYgEySF5LZKLmRV
        iAriQGxEdeHChcSAOQWjPCBTlFW51qwWUUEciIWo/JL05GyKUR5QFlKzqlw3q0VUEAdiISptzDSfhWyQ
        mlVVqVLFdO7cOWdZFaKCOBB5UfnZlN981s+maD4LZcWlrApRQRyIvKjIpiDbpGZVuWxWi6ggDkRaVKnZ
        lDZkRnlANkjOqvS90kXk27dv9+6tOBAVxIFIiyq1XRKjPCBbaMNJHQEyZMgQ796KA1FBHIisqPxsilEe
        EBYujADJV1HpcpGdO3eadevWxSbWrFljlixZYn8sb9myxe6jID0iK6rUbIpRHpBtXBgBkq+i0k5H5/Va
        t25tu8W0atUq8lFYWGh/OGsn27t3b7Nr1y5vbUBpRFJUN8qmGOUB2UTfs1yPAMlXUS1fvtyK3d/xxC0a
        NmxoPvvsM29tQGlEUlSp2RTtkiAscj0CJF9FtWzZMnsNmr/e4hb64bxgwQJvbUBpRFJUjPKAikJZVS5H
        gOSrqFauXGmLm/zXrXZU+v9shp436PZchF5Lspjbtm1rNmzY4K0NKI3IiUrZFKM8oCLJ5QiQfBWVLpBW
        v03/dWdbVHpOl0Sl96fKUP9v9R1VQQWkR+RExSgPqGiUVeVqBEgURBXHQFSZESlR6c0wygNygYSRixEg
        iCo/A1FlRqRExSgPyBXKqnIxAgRR5WcgqsyIjKj8knQ/m9Lx4P79+9trFQiiIkItlHR9jL8xVUSzWkSV
        n4GoMiMyorp48aLp169f4o1oo9Wb0YZLEBUROh9at27dxHdQ1wm999573jc0HCSqQYMGJb7zyugWLVrk
        fGiCgQ6P+usqbtG0aVN7cXjQuiH+HQsXLjSTJ09OrL+aNWuaqVOneltB7klLVH42pc7oyV8GgshlSFSq
        BgwTiapPnz6JZeqQozZi10Ol6RJr8vqKU6hUXfuroHVDBEfy/l3fcx29cIW0M6ri4mJ7qCX5y0AQuYwa
        NWrYxrVhIlH17ds3cPkEEeXo2LGjtxXknrRFpeun5s2bZ3r16mXnT82ePZsgchZqj6PzMBJJmOjY/erV
        q+2hR/3qbNCggWnevLnzoVZT2b52Kp9CP2IaN24cuG6I4NB3XOc1daRCo5tcqujOqJhCHSkOHz5sTp48
        aUpKSggipxG2pHx0wfHmzZttOfz8+fNtd27XY+zYsbE+R6XzmTrnErRuiOBQqzI1Fh8/frwpKioyR48e
        9baA3JO2qAAgf6Dqj6q/KIGoACIIokJUUQJRAUQQRIWoogSiAoggElUml5NErZQdUUULRAUQQVasWJH2
        4ERJKlui0vO4UG2IqKIFogKIIDcbnCiRqCLQb4eWzZCoXBjYiKiiBaICiCA3y6jUp1Pnr6Jcvq6Gxdu2
        bfPWBuQ7iAoggnz//feJKdxxCwlaba+OHDnirQ3IdxAVQATZunWreeGFFxLj6OMSyhZbtGhhL8yG6ICo
        ACLI6dOnzfLly22HihEjRsQm3nrrLTN37twKmf4MFQeiAgAAp0FUAADgMMb8F04G90EBWgblAAAAAElF
        TkSuQmCC
</value>
  </data>
</root>